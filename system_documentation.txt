# FRAUD DETECTION, ALERT, AND MONITORING (FDAM) SYSTEM
# TECHNICAL DOCUMENTATION AND CODEBASE OVERVIEW
# Date: March 21, 2025

## SYSTEM OVERVIEW

The Fraud Detection, Alert, and Monitoring (FDAM) System is a comprehensive solution for detecting, reporting, and monitoring fraudulent transactions in a payment gateway. The system combines rule-based detection with machine learning models to provide accurate fraud predictions in real-time.

## TECHNOLOGY STACK

### Backend
- **FastAPI** (v0.104.1): Modern, high-performance web framework for building APIs
- **Uvicorn** (v0.24.0): ASGI server for serving the FastAPI application
- **Pydantic** (v2.4.2): Data validation and settings management 
- **SQLAlchemy** (v2.0.23): SQL toolkit and Object-Relational Mapping (ORM) library
- **Python-dotenv** (v1.0.0): For loading environment variables from .env files

### Frontend/Dashboard
- **Dash** (v2.14.2): Python framework for building analytical web applications
- **Dash Bootstrap Components** (v1.5.0): Bootstrap components for Dash
- **Plotly** (v5.18.0): Interactive graphing library for data visualization

### Data Science & Machine Learning
- **Pandas** (v2.1.2): Data manipulation and analysis library
- **NumPy**: Numerical computing library
- **Scikit-learn** (v1.3.2): Machine learning library for classification
- **Joblib** (v1.3.2): For saving and loading machine learning models

### Testing
- **Pytest** (v7.4.3): Testing framework
- **HTTPX** (v0.25.1): HTTP client for testing API endpoints

### Database
- **SQLite**: Lightweight, file-based database used for development

## PROJECT ARCHITECTURE

### Directory Structure
```
project/
├── src/
│   ├── api/                 # API implementation
│   │   ├── endpoints.py     # API endpoints and route handlers
│   │   ├── main.py          # FastAPI application setup
│   │   └── schemas.py       # Data validation schemas
│   ├── dashboard/           # Web-based dashboard 
│   │   ├── app.py           # Dash application for data visualization
│   │   └── assets/          # Static assets for the dashboard
│   ├── database/            # Database operations
│   │   ├── database.py      # DB connection and session management
│   │   └── models.py        # SQLAlchemy ORM models
│   ├── models/              # Fraud detection models
│   │   ├── ai_model.py      # Machine learning model implementation
│   │   ├── rule_based.py    # Rule-based detection logic
│   │   ├── combined_model.py # Combined AI and rule-based approach
│   │   └── load_model.py    # Utility for loading pre-trained models
│   └── utils/               # Helper functions and utilities
├── tests/                   # Test cases
├── data/                    # Data files and ML models
├── generate_data.py         # Script to generate sample data
├── generate_fraud_data.py   # Script to generate fraudulent data
├── generate_high_risk_data.py # Script for high-risk transactions
├── init_db.py               # Database initialization script
├── requirements.txt         # Project dependencies
└── README.md                # Project documentation
```

## KEY COMPONENTS

### 1. Fraud Detection API

The API is implemented using FastAPI and provides several endpoints for transaction processing:

- **/api/detect**: Real-time fraud detection for a single transaction
- **/api/detect-json**: Process transactions using JSON input
- **/api/batch-detect**: Batch processing of multiple transactions
- **/api/transactions**: CRUD operations for transaction data
- **/api/metrics**: Retrieve fraud detection metrics and statistics
- **/api/report-fraud**: Submit fraud reports

The API combines both rule-based detection and machine learning models to achieve high accuracy:

- **Rule-Based Detection**: Implements predefined rules like transaction amount thresholds, unusual patterns, and high-risk regions/payment modes.
- **AI Model**: Uses a Random Forest classifier trained on historical transaction data to predict fraud probability.
- **Combined Approach**: Final decision combines outputs from both approaches for better accuracy.

### 2. Dashboard

The dashboard is built with Dash and provides a visual interface for monitoring transactions:

- **Transaction Table**: Interactive data table with search and filtering capabilities
- **Real-time Metrics**: Cards showing key metrics like transaction count and fraud rates
- **Visualizations**: Charts and graphs for data patterns and fraud distribution
- **Transaction Entry Form**: Form for submitting new transactions
- **JSON Transaction Processing**: Section for handling raw JSON transaction data
- **Transaction Details**: Modal for viewing detailed transaction information
- **JSON Input/Output Display**: Shows the raw JSON data sent to and received from the API

### 3. Database Models

The system uses SQLAlchemy ORM for database operations with the following key models:

- **Transaction**: Stores transaction details and fraud detection results
- **FraudReport**: Records user-submitted fraud reports

### 4. Machine Learning Models

The system includes several machine learning components:

- **Random Forest Classifier**: The primary ML model for fraud detection
- **Feature Engineering**: Transforms raw transaction data into model-ready features
- **Model Training**: Scripts for training and evaluating models
- **Saved Model**: Pre-trained model loaded at runtime

## API ENDPOINTS DETAILS

1. **GET /api/transactions**
   - Returns all transactions with optional filtering
   - Supports pagination via limit and offset parameters

2. **POST /api/detect**
   - Processes a single transaction
   - Returns fraud prediction results and confidence score
   - Response time under 300ms

3. **POST /api/detect-json**
   - Processes a transaction from raw JSON input
   - Returns detailed fraud detection results
   - Includes fraud source (rule/model) and reason

4. **POST /api/batch-detect**
   - Processes multiple transactions in parallel
   - Returns batch results with individual fraud predictions

5. **GET /api/metrics**
   - Returns fraud detection metrics
   - Supports date range filtering
   - Includes transaction counts, fraud rates, and model performance metrics

## DASHBOARD FEATURES

1. **Transaction Data Table**
   - Displays all transactions with pagination
   - Supports searching and filtering
   - Highlights fraudulent transactions

2. **Metric Cards**
   - Total transactions
   - Predicted frauds
   - Fraud percentage
   - Average transaction amount

3. **Data Visualization**
   - Transaction volume by channel/payment mode
   - Fraud distribution charts
   - Amount distribution histograms

4. **Transaction Submission**
   - Form-based submission
   - JSON transaction processing
   - Real-time fraud detection results

5. **JSON Input/Output Display**
   - Shows raw JSON data sent to API
   - Displays the API response
   - Collapsible for better UI experience

## FRAUD DETECTION LOGIC

The system uses a hybrid approach combining rule-based detection and machine learning:

### Rule-Based Detection Checks:
- High transaction amounts (above configurable thresholds)
- Unusual payment channels for specific users
- High-risk payment methods
- Suspicious transaction patterns
- Geographical risk assessment

### Machine Learning Features:
- Transaction amount
- Payment channel and mode
- User history and behavior patterns
- Temporal features (time of day, day of week)
- Derived features from transaction metadata

## DEPLOYMENT INFORMATION

The system is designed to run on multiple environments:

- **Development**: Local SQLite database with debug mode enabled
- **Testing**: In-memory database for unit and integration tests
- **Production**: Should be configured with a production-grade database (PostgreSQL recommended)

### Requirements:
- Python 3.8+
- Dependencies listed in requirements.txt
- Sufficient disk space for database and model storage

### Running the System:
1. Start the API server: `python src/api/main.py` (runs on port 8001)
2. Start the dashboard: `python src/dashboard/app.py` (runs on port 8050)
3. Access the dashboard at http://localhost:8050
4. API documentation available at http://localhost:8001/docs

## DATA FLOW

1. User submits a transaction via dashboard or API
2. Transaction data is validated and preprocessed
3. Rule-based checks are performed on the transaction
4. Machine learning model predicts fraud probability
5. Combined results determine final fraud classification
6. Results are stored in database and returned to user
7. Dashboard updates with new transaction data
8. Metrics are recalculated to include new transaction

## FUTURE ENHANCEMENTS

1. **User Authentication**: Add user authentication for dashboard and API
2. **Real-time Notifications**: Implement webhooks for real-time fraud alerts
3. **Advanced Visualization**: Add more complex data visualization options
4. **Model Retraining Pipeline**: Automate model retraining with new data
5. **Integration with External Systems**: Add support for external fraud databases
6. **Improved Feature Engineering**: Develop more sophisticated features for ML models
7. **Time Series Analysis**: Implement time-based pattern detection

## CONCLUSION

The Fraud Detection, Alert, and Monitoring (FDAM) System provides a comprehensive solution for detecting and monitoring fraudulent transactions. The system combines traditional rule-based approaches with modern machine learning techniques, delivered through a responsive web dashboard and a high-performance API.
